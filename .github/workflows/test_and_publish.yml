name: Test (and publish) package

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name: Test and lint package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: 'poetry'

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          source .venv/bin/activate
          poetry install --all-extras --no-interaction --no-root

      - name: Install library
        run: poetry install --all-extras --no-interaction

      - name: Check formatting with black
        run: |
          source .venv/bin/activate
          black --check aio_overpass/

      - name: Lint with Ruff
        run: |
          source .venv/bin/activate
          ruff check aio_overpass/

      - name: Check types with mypy
        run: |
          source .venv/bin/activate
          mypy aio_overpass/
        continue-on-error: true

      - name: Test with pytest
        run: |
          source .venv/bin/activate
          pytest -vv --cov=aio_overpass/ --cov-report=xml

      - name: Generate docs with pdoc
        run: |
          source .venv/bin/activate
          pdoc -o ./doc aio_overpass/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true

  publish-package:
    name: Publish new release on PyPI
    runs-on: ubuntu-latest
    needs: test  # do not publish if something fails
    if: |  # only run on new tag on main branch
      github.event_name == 'push'
      && github.head_ref == 'main'
      && startsWith(github.ref, 'refs/tags')
    environment:
      name: pypi
      url: https://pypi.org/p/aio-overpass
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Build the source and wheels archives
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-docs:
    name: Deploy documentation to Pages
    runs-on: ubuntu-latest
    needs: publish-package  # do not publish docs if package is not published
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --all-extras --no-interaction --no-root

      - name: Generate docs with pdoc
        run: |
          source .venv/bin/activate
          pdoc -o ./doc aio_overpass/

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './doc'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
